# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IwTb3XkL8ynyrWiTw3hN5xadi0xq7F1A

[source](https://www.w3schools.com/python/python_mysql_getstarted.asp)
"""

import mysql.connector
from mysql.connector import errorcode
from random import randint

DB_NAME = 'SADProject'

TABLES = {}
TABLES['customerT'] = (
    "CREATE TABLE `customerT` ("
    "  `customerID` VARCHAR(30) PRIMARY KEY,"
    "  `email` VARCHAR(255) NOT NULL,"
    "  `birthday` DATE NOT NULL,"
    "  `score` INTEGER NOT NULL"
    ") ")
TABLES['orderT'] = (
    "CREATE TABLE `orderT` ("
    "  `orderID` VARCHAR(100) PRIMARY KEY,"
    "  `customerID` VARCHAR(30) NOT NULL,"
    "  `date` DATE NOT NULL,"
    "  `total_price` INTEGER NOT NULL,"
    "  `discount_price` INTEGER NOT NULL,"
    "  `birthday_discount_price` INTEGER NOT NULL,"
    " FOREIGN KEY (customerID) REFERENCES customerT (customerID)"
    ") ")

class DBClass:
    def __init__(self):
        cnx = mysql.connector.connect(
            host="localhost",
            user="sad",
            password="sad_pass",
            database="SADProject"
            )

        cursor = cnx.cursor()
        for table_name in TABLES:
            table_description = TABLES[table_name]
            try:
                print("Creating table {}: ".format(table_name), end='')
                cursor.execute(table_description)
            except mysql.connector.Error as err:
                if err.errno == errorcode.ER_TABLE_EXISTS_ERROR:
                    print("already exists.")
                else:
                    print(err.msg)
            else:
                print("OK")
    
        cursor.close()
        self.cnx = cnx

    def insert_customer(self, params):
        id = params['customerID']
        email = params['email']
        birthday = params['birthday']
        score = 0

        sql = "INSERT INTO customerT (customerID, email, birthday, score) VALUES (%s, %s, %s, %s)"
        val = (id, email, birthday, score)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        self.cnx.commit()
        cursor.close()

    def insert_order(self, params):
        order_id = params['orderID']
        customer_id = params['customerID']
        date = params['date']
        total_price = params['total_price']
        discount_price = params['discount_price']
        birthday_discount_price = params['birthday_discount_price']

        sql = "INSERT INTO orderT (orderID, customerID, date, total_price,\
                discount_price, birthday_discount_price) VALUES (%s, %s, %s, %s, %s, %s)"
        val = (order_id, customer_id, date, total_price, discount_price, birthday_discount_price)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        self.cnx.commit()
        cursor.close()

    def get_orders(self, user_id):
        sql = "SELECT date, total_price FROM orderT WHERE customerID = %s"
        val = (user_id,)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        result = cursor.fetchall()
        cursor.close()
        result = [dict([('date', date.strftime('%Y/%m/%d')), ('total_price', total_price)])
                for (date, total_price) in result]
        return result
    
    def get_recent_purchases(self, user_id, months):
        sql = "SELECT total_price FROM orderT WHERE customerID = %s \
                AND date >= DATE_SUB( CURDATE(), INTERVAL %s MONTH )"
        val = (user_id, months)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        result = cursor.fetchall()
        cursor.close()
        result = [x[0] for x in result]
        return result

    def get_sum_of_purchases(self, user_id, months):
        sql = "SELECT sum(total_price) FROM orderT \
                WHERE customerID = %s AND date >= DATE_SUB( CURDATE(), INTERVAL %s MONTH )"
        val = (user_id, months)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        result = cursor.fetchall()
        cursor.close()
        sum = result[0][0]
        if not sum:
            sum = 0
        return sum
    
    def get_number_of_customer_purchases(self, month):
        sql = "SELECT COUNT(*) AS counter, new_table.my_number \
                FROM (SELECT COUNT(*) AS my_number \
                FROM orderT WHERE date >= DATE_FORMAT(CURRENT_DATE - INTERVAL %s MONTH, '%Y/%m/01')\
                AND date < DATE_FORMAT(CURRENT_DATE - INTERVAL %s MONTH, '%Y/%m/01')\
                GROUP BY orderT.customerID) AS new_table \
                GROUP BY new_table.my_number"
        cursor = self.cnx.cursor()
        val = (month + 1, month)
        cursor.execute(sql, val)
        result = cursor.fetchall()
        result = [dict([('counter', counter), ('my_number', my_number)])
                for (counter, my_number) in result]
        cursor.close()
        result = sorted(result, key = lambda k: k['my_number'])
        return result
    
    def get_a_months_sales(self, month):
        sql = "SELECT sum(total_price) FROM orderT \
                WHERE date >= DATE_FORMAT(CURRENT_DATE - INTERVAL %s MONTH, '%Y/%m/01')\
                AND date < DATE_FORMAT(CURRENT_DATE - INTERVAL %s MONTH, '%Y/%m/01')"
        val = (month + 1, month)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        result = cursor.fetchall()
        cursor.close()
        sum = result[0][0]
        if not sum:
            sum = 0
        return int(sum)

    def is_customer_birthbay (self, user_id):
        sql = "select count(*) FROM customerT \
                WHERE (customerT.customerID = %s) AND DATE_FORMAT(birthday,'%m-%d') = DATE_FORMAT(NOW(),'%m-%d')"
        val = (user_id,)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        result = cursor.fetchall()
        cursor.close()
        count_birthdays = result[0][0]
        if count_birthdays == 0:
            return True
        return False

    def get_customer_monthly_discount_sum(self, user_id):
        sql = "SELECT sum(discount_price) FROM orderT \
                WHERE customerID = %s AND date >= DATE_SUB( CURDATE(), INTERVAL 1 MONTH )"
        val = (user_id,)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        result = cursor.fetchall()
        cursor.close()
        sum = result[0][0]
        if not sum:
            sum = 0
        return sum
    
    def get_customer_birthday_discount_sum(self, user_id):
        sql = "SELECT sum(birthday_discount_price) FROM orderT \
        WHERE customerID = %s AND date = CURDATE()"
        val = (user_id,)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        result = cursor.fetchall()
        cursor.close()
        sum = result[0][0]
        if not sum:
            sum = 0
        return sum

    def get_userIDs(self):
        sql = 'SELECT customerID FROM customerT'
        cursor = self.cnx.cursor()
        cursor.execute(sql)
        result = cursor.fetchall()
        result = [user_id for (user_id,) in result]
        cursor.close()
        return result

    def get_customer_score(self, user_id):
        sql = "SELECT score FROM customerT WHERE customerID = %s"
        val = (user_id,)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        result = cursor.fetchone()
        cursor.close()
        return result

    def get_all_scores(self):
        sql = 'SELECT customerID, score FROM customerT'
        cursor = self.cnx.cursor()
        cursor.execute(sql)
        result = cursor.fetchall()
        cursor.close()
        result = dict([(customerID, score) for (customerID, score) in result])
        return result

    def update_customer_score(self, user_id, score):
        sql = "UPDATE customerT SET score = %s WHERE customerID = %s"
        val = (score, user_id)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        self.cnx.commit()
        cursor.close()


if __name__ == "__main__":
    db = DBClass()

    # customer = {
    #      'customerID' : '001',
    #      'email' : 'a@b.c',
    #      'birthday' : '1999-08-24',
    #      'score' : '0',
    # }
    # db.insert_customer(customer)
    #
    # order = {
    #      'orderID': '101',
    #      'customerID': '001',
    #      'date': '2020-08-24',
    #      'total_price': '12',
    #      'discount_price': '0',
    #      'birthday_discount_price': '6',
    #  }
    # db.insert_order(order)
    #
    # customer = {
    #      'customerID' : '002',
    #      'email' : 'aa@b.c',
    #      'birthday' : '1999-06-02',
    #      'score' : '0',
    # }
    # db.insert_customer(customer)
    #
    # order = {
    #      'orderID': '102',
    #      'customerID': '002',
    #      'date': '2020-08-02',
    #      'total_price': '12',
    #      'discount_price': '1',
    #      'birthday_discount_price': '0',
    #  }
    # db.insert_order(order)
    #
    # customer = {
    #     'customerID' : '003',
    #     'email' : 'aaa@b.c',
    #     'birthday' : '1999-08-24',
    #     'score' : '0',
    # }
    # db.insert_customer(customer)
    #
    # order = {
    #     'orderID': '103',
    #     'customerID': '003',
    #     'date': '2020-08-24',
    #     'total_price': '12',
    #     'discount_price': '0',
    #     'birthday_discount_price': '0',
    # }
    # db.insert_order(order)

# for i in range(100):


    # for i in range(100):
    #     customer = {
    #         'customerID' : str(i),
    #         'email' : 'a@b.c',
    #         'birthday' : f'{randint(1970, 2010)}-{randint(1,12)}-{randint(1,28)}',
    #         'score' : '0',
    #     }
    #     db.insert_customer(customer)
    #     for j in range(randint(1,30)):
    #         order = {
    #             'orderID': str(100 * i + j),
    #             'customerID': str(i),
    #             'date': f'2021-{randint(1, 7)}-{randint(1,28)}',
    #             'total_price': str(randint(1,500)),
    #         }
    #         db.insert_order(order)
    #     for j in range(randint(1,40)):
    #         order = {
    #             'orderID': str(100 * i + j + 1000000),
    #             'customerID': str(i),
    #             'date': f'2020-{randint(1, 12)}-{randint(1,28)}',
    #             'total_price': str(randint(1,500)),
    #         }
    #         db.insert_order(order)

    # for i in range(2000):
    #     customer = {
    #         'customerID' : str(i),
    #         'email' : 'a@b.c',
    #         'birthday' : f'{randint(1970, 2010)}-{randint(1,12)}-{randint(1,28)}',
    #         'score' : '0',
    #     }
    #     db.insert_customer(customer)
    #     for j in range(randint(1,15)):
    #         order = {
    #             'orderID': str(100 * i + j),
    #             'customerID': str(i),
    #             'date': f'2021-{randint(1, 5)}-{randint(1,28)}',
    #             'total_price': str(randint(1,500)),
    #         }
    #         db.insert_order(order)
    #     for j in range(randint(1, 4)):
    #         order = {
    #             'orderID': str(100 * i + j + 1000000),
    #             'customerID': str(i),
    #             'date': f'2021-6-{randint(1,28)}',
    #             'total_price': str(randint(1,600)),
    #         }
    #         db.insert_order(order)
    #     for j in range(randint(1, 5)):
    #         order = {
    #             'orderID': str(100 * i + j + 2000000),
    #             'customerID': str(i),
    #             'date': f'2021-7-{randint(1,28)}',
    #             'total_price': str(randint(1,600)),
    #         }
    #         db.insert_order(order)

    # orders = db.get_orders('1233')
    # print('get_orders:', orders)

    # users = db.get_userIDs()
    # print('get_userIDs:', users)

    # price = db.get_sum_of_purchases('1233', 1)
    # print('sum of purchases: ', price)

    # purchases = db.get_recent_purchases('1233', 10)
    # print('purchases: ', purchases)

    # db.update_customer_score('1233', 5)

    # scores = db.get_all_scores()
    # print('scores:', scores)
