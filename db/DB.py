# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IwTb3XkL8ynyrWiTw3hN5xadi0xq7F1A

[source](https://www.w3schools.com/python/python_mysql_getstarted.asp)
"""

import mysql.connector
from mysql.connector import errorcode

DB_NAME = 'SADProject'

TABLES = {}
TABLES['customerT'] = (
    "CREATE TABLE `customerT` ("
    "  `customerID` VARCHAR(30) PRIMARY KEY,"
    "  `email` VARCHAR(255) NOT NULL"
    ") ")
TABLES['product_orderT'] = (
    "CREATE TABLE `product_orderT` ("
    "  `product_orderID` VARCHAR(100) PRIMARY KEY,"
    "  `unit_price` INTEGER NOT NULL,"
    "  `productID` VARCHAR(40) NOT NULL"
    ") ")
TABLES['customer_orderT'] = (
    "CREATE TABLE `customer_orderT` ("
    "  `customer_orderID` VARCHAR(100) PRIMARY KEY,"
    "  `customerID` VARCHAR(30) NOT NULL,"
    "  `product_orderID` VARCHAR(100) NOT NULL,"
    " FOREIGN KEY (customerID) REFERENCES customerT (customerID),"
    " FOREIGN KEY (product_orderID) REFERENCES product_orderT (product_orderID)"
    ") ")

class DBClass:
    def __init__(self):
        cnx = mysql.connector.connect(
            host="localhost",
            user="sad",
            password="sad_pass",
            database="SADProject"
            )

        cursor = cnx.cursor()
        for table_name in TABLES:
            table_description = TABLES[table_name]
            try:
                print("Creating table {}: ".format(table_name), end='')
                cursor.execute(table_description)
            except mysql.connector.Error as err:
                if err.errno == errorcode.ER_TABLE_EXISTS_ERROR:
                    print("already exists.")
                else:
                    print(err.msg)
            else:
                print("OK")
    
        cursor.close()
        self.cnx = cnx

    def insert_customer(self, params):
        id = params['customerID']
        email = params['email']

        sql = "INSERT INTO customerT (customerID, email) VALUES (%s, %s)"
        val = (id, email)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        self.cnx.commit()
        cursor.close()

    def insert_product_order(self, params):
        product_order_id = params['product_orderID']
        unit_price = params['unit_price']
        product_id = params['productID']

        sql = "INSERT INTO product_orderT (product_orderID, unit_price, productID) VALUES (%s, %s, %s)"
        val = (product_order_id, unit_price, product_id)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        self.cnx.commit()
        cursor.close()

    def insert_customer_order(self, params):
        customer_order_id = params['customer_orderID']
        customer_id = params['customerID']
        product_order_id = params['product_orderID']

        sql = "INSERT INTO customer_orderT (customer_orderID, customerID, product_orderID) VALUES (%s, %s, %s)"
        val = (customer_order_id, customer_id, product_order_id)
        cursor = self.cnx.cursor()
        cursor.execute(sql, val)
        self.cnx.commit()
        cursor.close()



if __name__ == "__main__":
    db = DBClass()

    customer = {
        'customerID' : '1233',
        'email' : 'a@b.c',
    }
    db.insert_customer(customer)

    product_order = {
        'product_orderID': '12',
        'unit_price': '14000',
        'productID': '14',
    }
    db.insert_product_order(product_order)

    customer_order = {
        'customer_orderID': '001',
        'customerID': '1233',
        'product_orderID': '12',
    }
    db.insert_customer_order(customer_order)
